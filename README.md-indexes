#Create a Single Field Index
Use createIndex() to create a new index in a collection

#Create a Unique Single Field Index
Add {unique:true} as a second, optional, parameter in createIndex() to force uniqueness 

#View the Indexes used in a Collection
Use getIndexes() to see all the indexes created in a collection.
db.customers.getIndexes()

#Check if an index is being used on a query
Use explain() in a collection when running a query to see the Execution plan. This plan provides the details of the execution stages (IXSCAN , COLLSCAN, FETCH, SORT, etc.).

The IXSCAN stage indicates the query is using an index and what index is being selected.
The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
The FETCH stage indicates documents are being read from the collection.
The SORT stage indicates documents are being sorted in memory.

#Create a Single field Multikey Index
Use createIndex() to create a new index in a collection. Include an object as parameter that contains the array field and sort order.

#View the Indexes used in a Collection
Use getIndexes() to see all the indexes created in a collection.
db.customers.getIndexes()

#Create a Compound Index
Use createIndex() to create a new index in a collection. Within the parentheses of createIndex(), include an object that contains two or more fields and their sort order.

#Order of Fields in a Compound Index
Equality: field/s that matches on a single field value in a query
Sort: field/s that orders the results by in a query
Range: field/s that the query filter in a range of valid values

#Cover a query by the Index
An Index covers a query when MongoDB does not need to fetch the data from memory since all the required data is already returned by the index.
fields are part of the index and when we run the explain() command, the execution plan shows only two stages:

IXSCAN - Index scan using the compound index
PROJECTION_COVERED - All the information needed is returned by the index, no need to fetch from memory

#Delete an Index
Use dropIndex()

#Delete index by name:
db.customers.dropIndex(
  'active_1_birthdate_-1_name_1'
)

#Delete index by key:
db.customers.dropIndex({
  active:1,
  birthdate:-1, 
  name:1
})

Conclusion:
/Single-field (one field)
/Compound (2 to 32 fields)
/We worked with index properties like unique and understood that Multikey indexes are indexes that include one array field.
/commands in the collection to create or delete indexes:
createIndex()
dropIndex()
/view the indexes being used in a collection with the getIndexes() command
/check if the index is being used in a query by executing the explain() command.

